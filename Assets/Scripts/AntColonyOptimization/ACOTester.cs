using System.Collections;
using System.Collections.Generic;
using Unity.VisualScripting;
using UnityEngine;
public class ACOTester : MonoBehaviour
{
    // The ACO Controller.
    private ACOCON MyACOCON = new ACOCON();
    // Array of possible waypoints.
    private List<GameObject> Waypoints = new List<GameObject>();
    // Connections between nodes.
    private List<ACOConnection> Connections = new List<ACOConnection>();
    // The route generated by the ACO algorithm.
    private List<ACOConnection> MyACORoute = new List<ACOConnection>();
    // Debug line offset.
    private Vector3 OffSet = new Vector3(0, 0.5f, 0);
    // The Start node for any created route.
    [SerializeField] private GameObject StartNode;
    // The max length of a path created by the ACO.
    [SerializeField] private int MaxPathLength;
    // Start is called before the first frame update
    void Start()
    {
        if (StartNode == null)
        {
            Debug.Log("No start waypoint node.");
            return;
        }
        VisGraphWaypointManager tmpWpM = StartNode.GetComponent<VisGraphWaypointManager>();
        if (tmpWpM == null)
        {
            Debug.Log("Start node is not a waypoint.");
            return;
        }
        // Find all the waypoints in the level.
        GameObject[] GameObjectsWithWaypointTag;
        GameObjectsWithWaypointTag = GameObject.FindGameObjectsWithTag("Waypoint");
        foreach (GameObject waypoint in GameObjectsWithWaypointTag)
        {
            VisGraphWaypointManager tmpWaypointCon = waypoint.GetComponent<VisGraphWaypointManager>();
            if (tmpWaypointCon)
            {
                if (tmpWaypointCon.WaypointType == VisGraphWaypointManager.waypointPropsList.Goal)
                {
                    // We are creating a waypoint map of only the goal nodes. We want out ACO algorithm to create the shortest path between the goal nodes.
                    Waypoints.Add(waypoint);
                }
            }
        }
        // Go through the waypoints and create connections.
        foreach (GameObject waypoint in Waypoints)
        {
            VisGraphWaypointManager tmpWaypointCon = waypoint.GetComponent<VisGraphWaypointManager>();
            // Loop through a waypoints connections.
            foreach (VisGraphConnection aVisGraphConnection in tmpWaypointCon.Connections)
            {
                ACOConnection aConnection = new ACOConnection();
                aConnection.SetConnection(waypoint, aVisGraphConnection.ToNode, MyACOCON.DefaultPheromone);
                Connections.Add(aConnection);
            }
        }
        if (Connections.Count <= 1)
        {
            Debug.Log("Warning, you have set 1 or 0 goal nodes. You need at least 2. However, more is expected.");
            return;
        }
        MyACORoute = MyACOCON.ACO(50, 25, Waypoints.ToArray(), Connections, StartNode, MaxPathLength);
        if (MyACORoute.Count == 0)
        {
            Debug.Log("Warning, ACO did not return a path. Please check all logs.");
        }
    }
    // Draws debug objects in the editor and during editor play (if option set).
    void OnDrawGizmos()
    {
        // Draw path.
        if (MyACORoute.Count > 0)
        {
            foreach (ACOConnection aConnection in MyACORoute)
            {
                Gizmos.color = Color.white;
                Gizmos.DrawLine((aConnection.FromNode.transform.position + OffSet),
                (aConnection.ToNode.transform.position + OffSet));
            }
        }
    }
    // Update is called once per frame
    void Update()
    {
    }
}